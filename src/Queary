CREATE TABLE users (
    user_id VARCHAR(20) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL,
    role VARCHAR(20) NOT NULL CHECK (role IN ('STUDENT', 'CLUB_MEMBER', 'ADMIN')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE students (
    student_id VARCHAR(50) PRIMARY KEY,
    department VARCHAR(100) NOT NULL,
    semester INT NOT NULL CHECK (semester BETWEEN 1 AND 8),
    interests VARCHAR(500),
    CONSTRAINT fk_student_user FOREIGN KEY (student_id) REFERENCES users(user_id) ON DELETE CASCADE
);


-- CLUBS TABLE
CREATE TABLE clubs (
    club_id SERIAL PRIMARY KEY,
    club_name VARCHAR(100) UNIQUE NOT NULL,
    category VARCHAR(50) NOT NULL,
    description VARCHAR(1000),
    founder_id VARCHAR(50),
    status VARCHAR(20) NOT NULL DEFAULT 'Pending' CHECK (status IN ('Pending', 'Approved', 'Rejected')),
    member_count INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_founder_user FOREIGN KEY (founder_id) REFERENCES users(user_id) ON DELETE SET NULL
);

-- CLUB MEMBERS TABLE
CREATE TABLE club_members (
    member_id VARCHAR(50),
    club_id INT,
    position VARCHAR(50) NOT NULL CHECK (position IN ('President', 'Member')),
    PRIMARY KEY (member_id, club_id),
    CONSTRAINT fk_member_user FOREIGN KEY (member_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_member_club FOREIGN KEY (club_id) REFERENCES clubs(club_id) ON DELETE CASCADE
);

-- EVENTS TABLE
CREATE TABLE events (
    event_id SERIAL PRIMARY KEY,
    club_id INT NOT NULL,
    event_name VARCHAR(100) NOT NULL,
    description VARCHAR(1000),
    event_date DATE NOT NULL,
    start_time TIME,
    end_time TIME,
    venue VARCHAR(200),
    registered_count INT DEFAULT 0,
    max_participants INT DEFAULT 0,
    category VARCHAR(50),
    discount_available BOOLEAN DEFAULT FALSE,
    approval_status VARCHAR(20) DEFAULT 'Pending' CHECK (approval_status IN ('Pending', 'Approved', 'Rejected')),
    completion_status VARCHAR(20) DEFAULT 'Not Completed' CHECK (completion_status IN ('Completed', 'Not Completed')),
    created_by VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_event_club FOREIGN KEY (club_id) REFERENCES clubs(club_id) ON DELETE CASCADE,
    CONSTRAINT fk_event_creator FOREIGN KEY (created_by) REFERENCES users(user_id) ON DELETE SET NULL
);

CREATE TABLE event_history (
    history_id SERIAL PRIMARY KEY,
    event_id INT NOT NULL,
    club_id INT NOT NULL,
    event_name VARCHAR(100) NOT NULL,
    description VARCHAR(1000),
    event_date DATE,
    start_time TIME,
    end_time TIME,
    venue VARCHAR(200),
    ticket_price DECIMAL(8,2) DEFAULT 0 CHECK (ticket_price >= 0),
    total_participants INT,
    recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_history_event FOREIGN KEY (event_id) REFERENCES events(event_id) ON DELETE CASCADE,
    CONSTRAINT fk_history_club FOREIGN KEY (club_id) REFERENCES clubs(club_id) ON DELETE CASCADE
);


-- PAYMENT TABLE
CREATE TABLE payment (
    payment_id SERIAL PRIMARY KEY,
    user_id VARCHAR(50) NOT NULL,
    event_id INT NOT NULL,
    amount DECIMAL(8,2) NOT NULL CHECK (amount >= 0),
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_payment_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_payment_event FOREIGN KEY (event_id) REFERENCES events(event_id) ON DELETE CASCADE
);

CREATE TABLE event_registration (
    registration_id SERIAL PRIMARY KEY,
    user_id VARCHAR(50) NOT NULL,
    event_id INT NOT NULL,
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_registration_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_registration_event FOREIGN KEY (event_id) REFERENCES events(event_id) ON DELETE CASCADE,
);
