CREATE TABLE users (
    user_id VARCHAR(20) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL,
    role VARCHAR(20) NOT NULL CHECK (role IN ('STUDENT', 'CLUB_MEMBER', 'ADMIN')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE students (
    student_id VARCHAR(50) PRIMARY KEY,
    department VARCHAR(100) NOT NULL,
    semester INT NOT NULL CHECK (semester BETWEEN 1 AND 8),
    interests VARCHAR(500),
    CONSTRAINT fk_student_user FOREIGN KEY (student_id) REFERENCES users(user_id) ON DELETE CASCADE
);


-- CLUBS TABLE
CREATE TABLE clubs (
    club_id SERIAL PRIMARY KEY,
    club_name VARCHAR(100) UNIQUE NOT NULL,
    category VARCHAR(50) NOT NULL,
    description VARCHAR(1000),
    founder_id VARCHAR(50),
    status VARCHAR(20) NOT NULL DEFAULT 'Pending' CHECK (status IN ('Pending', 'Approved', 'Rejected')),
    member_count INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_founder_user FOREIGN KEY (founder_id) REFERENCES users(user_id) ON DELETE SET NULL
);

-- CLUB MEMBERS TABLE
CREATE TABLE club_members (
    member_id VARCHAR(50),
    club_id INT,
    position VARCHAR(50) NOT NULL CHECK (position IN ('President', 'Member')),
    PRIMARY KEY (member_id, club_id),
    CONSTRAINT fk_member_user FOREIGN KEY (member_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_member_club FOREIGN KEY (club_id) REFERENCES clubs(club_id) ON DELETE CASCADE
);

-- EVENTS TABLE
CREATE TABLE events (
    event_id SERIAL PRIMARY KEY,
    club_id INT NOT NULL,
    event_name VARCHAR(100) NOT NULL,
    description VARCHAR(1000),
    event_date DATE NOT NULL,
    start_time TIME,
    end_time TIME,
    venue VARCHAR(200),
    registered_count INT DEFAULT 0,
    max_participants INT DEFAULT 0,
    discount_available BOOLEAN DEFAULT FALSE,
    approval_status VARCHAR(20) DEFAULT 'Pending' CHECK (approval_status IN ('Pending', 'Approved', 'Rejected')),
    completion_status VARCHAR(20) DEFAULT 'Not Completed' CHECK (completion_status IN ('Completed', 'Not Completed', 'Cancel')),
    created_by VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_event_club FOREIGN KEY (club_id) REFERENCES clubs(club_id) ON DELETE CASCADE,
    CONSTRAINT fk_event_creator FOREIGN KEY (created_by) REFERENCES users(user_id) ON DELETE SET NULL
);

-- EVENT HISTORY TABLE
CREATE TABLE event_history (
    history_id SERIAL PRIMARY KEY,
    event_id INT NOT NULL,
    event_name VARCHAR(100) NOT NULL,
    club_name VARCHAR(100),
    event_date DATE,
    start_time TIME,
    end_time TIME,
    venue VARCHAR(200),
    total_participants INT,
    recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE notifications (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(50) NOT NULL,
    event_id INT NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE event_registration (
    registration_id SERIAL PRIMARY KEY,
    user_id VARCHAR(50) NOT NULL,
    event_id INT NOT NULL,
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_registration_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_registration_event FOREIGN KEY (event_id) REFERENCES events(event_id) ON DELETE CASCADE,
);

--functions
create or replace function
returnUserData(in uid varchar)
returns users
language plpgsql
as $$
declare user_data users%rowtype;
begin
select * into user_data from users where user_id = uid;
return user_data;
end;
$$

create or replace function
returnClubData(in cid int)
returns clubs
language plpgsql
as $$
declare club_data clubs%rowtype;
begin
select * into club_data from clubs where club_id = cid;
return club_data;
end;
$$

create or replace function
returnEventData(in eid int)
returns events
language plpgsql
as $$
declare event_data events%rowtype;
begin
select * into event_data from events where event_id = eid;
return event_data;
end;
$$

--discount
--trigger to send data into history table


CREATE OR REPLACE FUNCTION update_event_reg_count()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE events
    SET registered_count = registered_count + 1
    WHERE event_id = NEW.event_id;

    RETURN NEW;
END;
$$;


CREATE TRIGGER trg_after_insert_event_reg
AFTER INSERT ON event_registration
FOR EACH ROW
EXECUTE FUNCTION update_event_reg_count();

CREATE OR REPLACE FUNCTION checkcount(event_id INT)
RETURNS BOOLEAN
 LANGUAGE plpgsql
 AS $$
DECLARE
    reg_count INT;
    max_participant INT;
    c CURSOR FOR
        SELECT registered_count, max_participants
        FROM events
        WHERE event_id = event_id;
BEGIN
    OPEN c;
    LOOP
        FETCH c INTO reg_count, max_participant;
        EXIT WHEN NOT FOUND;
        IF registered_count >= max_participants THEN
            CLOSE c;
            RETURN FALSE;
        ELSE
            CLOSE c;
            RETURN TRUE;
        END IF;
    END LOOP;
    CLOSE c;
    RETURN FALSE;
END;
$$;

CREATE OR REPLACE FUNCTION checkAlreadyRegistered(u_id varchar, e_id INT)
RETURNS BOOLEAN
LANGUAGE plpgsql
AS $$
DECLARE
user varchar;
BEGIN
    SELECT user_id into user FROM event_registration
    WHERE event_id = e_id AND user_id = u_id;

    IF FOUND THEN
        RETURN FALSE;
    ELSE
        RETURN TRUE;
    END IF;
END;
$$ ;

// if admin rejects a club, delete club
CREATE OR REPLACE PROCEDURE deleteClub(id in INT)
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM clubs WHERE club_id = id;
END;
$$;

// when a club is deleted, delete all members (President) and users associated with that club
CREATE OR REPLACE FUNCTION delete_club_members()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM club_members
    WHERE club_id = OLD.club_id;

    DELETE FROM users
    WHERE user_id = OLD.founder_id;
    RETURN OLD;
END;
$$;

CREATE TRIGGER trg_delete_club_members
AFTER DELETE ON clubs
FOR EACH ROW
EXECUTE FUNCTION delete_club_members();

CREATE OR REPLACE FUNCTION update_member_count()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE clubs
    SET member_count = member_count + 1
    WHERE club_id = NEW.club_id;
    RETURN NEW;
END;
$$;

CREATE TRIGGER trg_after_member_join
AFTER INSERT ON club_members
FOR EACH ROW
EXECUTE FUNCTION update_member_count();

CREATE OR REPLACE FUNCTION checkclubcount(id INT)
RETURNS BOOLEAN
LANGUAGE plpgsql
AS $$
DECLARE
    current_count INT;
    max_limit INT;
    c CURSOR FOR
        SELECT member_count, max_member
        FROM clubs
        WHERE club_id = id;
BEGIN
    OPEN c;

    FETCH c INTO current_count, max_limit;

    IF NOT FOUND THEN
        CLOSE c;
        RETURN FALSE;  -- No such club
    END IF;

    CLOSE c;

    IF current_count >= max_limit THEN
        RETURN FALSE;  -- Club is full
    ELSE
        RETURN TRUE;   -- Can join
    END IF;
END;
$$;

CREATE OR REPLACE PROCEDURE event_complete()
LANGUAGE plpgsql
AS $$
DECLARE
    c CURSOR FOR
        SELECT event_id, club_id, event_name, description, event_date, start_time, end_time, venue, ticket_price, registered_count, created_by, category
        FROM events
        WHERE now() > (event_date + end_time);

    v_event_id events.event_id%TYPE;
    v_club_id events.club_id%TYPE;
    v_event_name events.event_name%TYPE;
    v_description events.description%TYPE;
    v_event_date events.event_date%TYPE;
    v_start_time events.start_time%TYPE;
    v_end_time events.end_time%TYPE;
    v_venue events.venue%TYPE;
    v_ticket_price events.ticket_price%TYPE;
    v_total_participants events.registered_count%TYPE;
    v_created_by events.created_by%TYPE;
    v_category events.category%TYPE;

    id INT;
BEGIN
    OPEN c;
    LOOP
        FETCH c INTO v_event_id, v_club_id, v_event_name, v_description, v_event_date, v_start_time, v_end_time, v_venue, v_ticket_price, v_total_participants, v_created_by, v_category;
        EXIT WHEN NOT FOUND;

        SELECT event_id INTO id FROM event_history WHERE event_id = v_event_id;
        IF NOT FOUND THEN
            INSERT INTO event_history(event_id, club_id, event_name, description, event_date, start_time, end_time, venue, ticket_price, total_participants, founder_id, category)
            VALUES (v_event_id, v_club_id, v_event_name, v_description, v_event_date, v_start_time, v_end_time, v_venue, v_ticket_price, v_total_participants, v_created_by, v_category);
        END IF;
    END LOOP;
    CLOSE c;
END;
$$;


CREATE or REPLACE function update_events()
RETURNS trigger
language plpgsql
as $$
DECLARE
cstatus VARCHAR;
astatus VARCHAR;
begin
	select completion_status,approval_status into cstatus,astatus from events where event_id=new.event_id;
	if cstatus <> 'Cancel' and astatus <> 'Rejected' then
		update events set completion_status='Completed' where event_id=new.event_id;
	end if;
	return new;
end;
$$;

CREATE TRIGGER trigger_update_events
after insert on event_history
for each row
execute function update_events();

CREATE OR REPLACE PROCEDURE apply_ticket_price_rules()
LANGUAGE plpgsql
AS $$
DECLARE
    -- Cursor to loop through applicable events
    event_cursor CURSOR FOR
        SELECT event_id, event_date, registered_count, max_participants, ticket_price
        FROM events
        WHERE discount_available = true;

    -- Variables
    v_event_id INT;
    v_event_date DATE;
    v_registered_count INT;
    v_max_participants INT;
    v_ticket_price NUMERIC;
    v_discounted_price NUMERIC;

    is_early_registrant BOOLEAN;
    is_event_soon BOOLEAN;
BEGIN
    OPEN event_cursor;

    LOOP
        FETCH event_cursor INTO
            v_event_id, v_event_date, v_registered_count, v_max_participants, v_ticket_price;

        EXIT WHEN NOT FOUND;

        -- Check conditions
        is_early_registrant := v_registered_count <= CEIL(0.2 * v_max_participants);
        is_event_soon := v_event_date <= CURRENT_DATE + INTERVAL '7 days';

        v_discounted_price := v_ticket_price;

       IF is_early_registrant = TRUE AND is_event_soon = TRUE THEN
            -- Both true: only apply 10% discount
            v_discounted_price := v_discounted_price * 0.9;
        ELSIF is_early_registrant = TRUE AND is_event_soon = FALSE THEN
            -- Only early registrant: apply discount
            v_discounted_price := v_discounted_price * 0.9;
       ELSIF is_early_registrant = FALSE AND is_event_soon = TRUE THEN
            -- Only near event date: apply increase
            v_discounted_price := v_discounted_price * 1.1;
       ELSE
            --No update
            continue;
        END IF;

        v_discounted_price := ROUND(v_discounted_price, 2);

        UPDATE events
        SET discounted_price = v_discounted_price
        WHERE event_id = v_event_id;

    END LOOP;

    CLOSE event_cursor;
END;
$$;